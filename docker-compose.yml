version: '3.9'

services:

  postgres:
    container_name: postgres
    build:
      context: .
      dockerfile: ./postgres/Dockerfile
    restart: unless-stopped
    env_file: 
      - .env
    environment:
      POSTGRES_DB: mockbuster
    working_dir: /app
    ports:
      - 5432:5432
    volumes:
      - .:/app
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
  
  redis:
    image: redis:7
    container_name: redis
    restart: unless-stopped
    user: "$UID:$GID"
    ports:
      - 6379:6379
    working_dir: /app
    volumes:
      - .:/app
  
  nginx:
    image: nginx:stable-alpine3.17-slim
    container_name: nginx
    restart: unless-stopped
    depends_on:
      - server
    env_file: 
      - .env
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf 
      - ./nginx/certificate.crt:/etc/nginx/certificates/certificate.crt
      - ./nginx/private.key:/etc/nginx/certificates/private.key
    ports:
      - "80:80"
      - "443:443"

  zookeeper:
    image: bitnami/zookeeper:3.9.2
    container_name: zookeeper
    ports:
      - "2181:2181" 
    # volumes:
    #   - ./zookeeper/jaas.conf:/opt/bitnami/zookeeper/conf/jaas.conf
    environment:
      # ZOO_ENABLE_AUTH: true
      # ALLOW_ANONYMOUS_LOGIN: no
      ALLOW_PLAINTEXT_LISTENER: yes
      ALLOW_ANONYMOUS_LOGIN: yes
      # ZOO_SERVER_USERS: ${ZOOKEEPER_USER}
      # ZOO_SERVER_PASSWORDS: ${ZOOKEEPER_PASSWORD}
      ZOO_LOG_LEVEL: TRACE

  kafka:
    image: bitnami/kafka:3.6.2
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      # KAFKA_ZOOKEEPER_USER: ${ZOOKEEPER_USER}
      # KAFKA_ZOOKEEPER_PASSWORD: ${ZOOKEEPER_PASSWORD}
    depends_on:
      - zookeeper  

  kafka-consumer:
    image: rust:1.77.2
    container_name: kafka-consumer
    env_file:
      - .env
    working_dir: /app
    volumes:
      - .:/app
    depends_on:
      - zookeeper  
      - kafka  
    command: >
      sh -c "apt-get update && apt-get install -y cmake && cargo install cargo-watch && cd /app/consumers && cargo watch -x run"

  server:
    image: rust:1.77.2
    container_name: server
    ports:
      - "8080:8080"
    env_file:
      - .env
    working_dir: /app
    volumes:
      - .:/app
    depends_on:
      - zookeeper  
      - kafka  
      - postgres
      - redis
    command: >
      sh -c "\
        apt-get update && \
        apt-get install -y cmake && \
        cargo install cargo-watch && \
        curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh && \
        rustup component add rustfmt && \
        cargo install sea-orm-cli && \
        sea-orm-cli migrate up && \
        sea-orm-cli generate entity -o ./models/generated --with-serde both && \
        cd /app/server && \
        cargo watch -x run \
      "

  wasm-builder:
    image: rust:1.77.2
    container_name: wasm-builder
    env_file:
      - .env
    working_dir: /app
    volumes:
      - .:/app
    command: >
      sh -c "\
        apt update && \
        apt remove cmdtest && \
        apt install -y nodejs npm && \
        npm install -g yarn && \
        curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh && \
        cd /app && \
        yarn && \
        yarn compile::dev::watch;
      "


